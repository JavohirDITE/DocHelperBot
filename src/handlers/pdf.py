import os
import tempfile
import logging
from io import BytesIO

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import fitz
from PIL import Image

from handlers.utils import delete_previous_messages

router = Router()
logger = logging.getLogger(__name__)

class PDFStates(StatesGroup):
    waiting_for_images = State()
    waiting_for_pdfs_to_merge = State()
    waiting_for_pdf_to_compress = State()


@router.callback_query(F.data == "menu:images_to_pdf")
async def start_images_to_pdf(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF."""
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await state.set_state(PDFStates.waiting_for_images)
    await state.update_data(images=[])
    
    await delete_previous_messages(callback.message)
    
    await callback.message.answer(
        "üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí PDF</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ PDF.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å PDF¬ª.",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üìÑ –°–æ–∑–¥–∞—Ç—å PDF", callback_data="create_pdf")
        .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        .adjust(1)
        .as_markup()
    )


@router.message(F.photo, PDFStates.waiting_for_images)
@router.message(F.document & F.document.mime_type.startswith("image/"), PDFStates.waiting_for_images)
async def process_image_for_pdf(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF."""
    try:
        if message.photo:
            file_id = message.photo[-1].file_id
        else:
            file_id = message.document.file_id
        
        file = await message.bot.get_file(file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        data = await state.get_data()
        images = data.get("images", [])
        images.append(file_content.read())
        
        await state.update_data(images=images)
        
        await message.answer(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å PDF¬ª.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üìÑ –°–æ–∑–¥–∞—Ç—å PDF", callback_data="create_pdf")
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .adjust(1)
            .as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )


@router.callback_query(F.data == "create_pdf", PDFStates.waiting_for_images)
async def create_pdf_from_images(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    await callback.answer()
    
    data = await state.get_data()
    images = data.get("images", [])
    
    if not images:
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )
        return
    
    processing_msg = await callback.message.answer("üîÑ –°–æ–∑–¥–∞—é PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            pdf_path = os.path.join(temp_dir, "result.pdf")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è PDF
            create_pdf_from_images_pil(images, pdf_path)
            
            await callback.message.answer_document(
                FSInputFile(pdf_path, filename="images_to_pdf.pdf")
            )
            
            await delete_previous_messages(callback.message)
            await processing_msg.delete()
            
            await callback.message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                .as_markup()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        await processing_msg.delete()
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            .as_markup()
        )
    
    await state.clear()


def create_pdf_from_images_list(images_data, output_path):
    """–°–æ–∑–¥–∞–µ—Ç PDF –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é PyMuPDF."""
    pdf = fitz.open()
    
    for img_data in images_data:
        img = Image.open(BytesIO(img_data))
        
        if img.mode == 'RGBA':
            img = img.convert('RGB')
        
        img_bytes = BytesIO()
        img.save(img_bytes, format="JPEG")
        img_bytes.seek(0)
        
        img_doc = fitz.open("jpg", img_bytes.read())
        pdf.insert_pdf(img_doc)
    
    pdf.save(output_path)
    pdf.close()


def create_pdf_from_images_pil(images_data, output_path):
    """–°–æ–∑–¥–∞–µ—Ç PDF –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é PIL."""
    images = []
    
    for img_data in images_data:
        img = Image.open(BytesIO(img_data))
        
        if img.mode == 'RGBA':
            img = img.convert('RGB')
        
        images.append(img)
    
    if images:
        # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PDF
        first_image = images[0]
        first_image.save(
            output_path, 
            "PDF", 
            resolution=100.0, 
            save_all=True,
            append_images=images[1:] if len(images) > 1 else []
        )


@router.callback_query(F.data == "menu:merge_pdf")
async def start_merge_pdf(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤."""
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤
    await state.set_state(PDFStates.waiting_for_pdfs_to_merge)
    await state.update_data(pdfs=[])
    
    await delete_previous_messages(callback.message)
    
    await callback.message.answer(
        "üìë <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ PDF-—Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF¬ª.",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üìë –û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF", callback_data="merge_pdf_files")
        .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        .adjust(1)
        .as_markup()
    )


@router.message(F.document & F.document.mime_type == "application/pdf", PDFStates.waiting_for_pdfs_to_merge)
async def process_pdf_for_merge(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        data = await state.get_data()
        pdfs = data.get("pdfs", [])
        
        pdfs.append({
            "content": file_content.read(),
            "name": message.document.file_name
        })
        
        await state.update_data(pdfs=pdfs)
        
        await message.answer(
            f"‚úÖ PDF-—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(pdfs)}.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ PDF-—Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF¬ª.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üìë –û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF", callback_data="merge_pdf_files")
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .adjust(1)
            .as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )


@router.callback_query(F.data == "merge_pdf_files", PDFStates.waiting_for_pdfs_to_merge)
async def merge_pdf_files(callback: CallbackQuery, state: FSMContext):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–æ–≤."""
    await callback.answer()
    
    data = await state.get_data()
    pdfs = data.get("pdfs", [])
    
    if len(pdfs) < 2:
        await callback.message.answer(
            "‚ùå –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ PDF-—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )
        return
    
    processing_msg = await callback.message.answer("üîÑ –û–±—ä–µ–¥–∏–Ω—è—é PDF-—Ñ–∞–π–ª—ã...")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            merged_pdf_path = os.path.join(temp_dir, "merged.pdf")
            merge_pdfs([pdf["content"] for pdf in pdfs], merged_pdf_path)
            
            await callback.message.answer_document(
                FSInputFile(merged_pdf_path, filename="merged.pdf")
            )
            
            await delete_previous_messages(callback.message)
            await processing_msg.delete()
            
            await callback.message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! PDF-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                .as_markup()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ PDF: {e}")
        await processing_msg.delete()
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ PDF: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            .as_markup()
        )
    
    await state.clear()


def merge_pdfs(pdf_contents, output_path):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω."""
    merged_pdf = fitz.open()
    
    for pdf_content in pdf_contents:
        pdf = fitz.open("pdf", pdf_content)
        merged_pdf.insert_pdf(pdf)
    
    merged_pdf.save(output_path)
    merged_pdf.close()


@router.callback_query(F.data == "menu:compress_pdf")
async def start_compress_pdf(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è PDF-—Ñ–∞–π–ª–∞."""
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è PDF-—Ñ–∞–π–ª–∞
    await state.set_state(PDFStates.waiting_for_pdf_to_compress)
    
    await delete_previous_messages(callback.message)
    
    await callback.message.answer(
        "üóú <b>–°–∂–∞—Ç–∏–µ PDF</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å.",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        .as_markup()
    )


@router.message(F.document & F.document.mime_type == "application/pdf", PDFStates.waiting_for_pdf_to_compress)
async def process_pdf_for_compression(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è."""
    processing_msg = await message.answer("üîÑ –°–∂–∏–º–∞—é PDF-—Ñ–∞–π–ª...")
    
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        with tempfile.TemporaryDirectory() as temp_dir:
            input_pdf_path = os.path.join(temp_dir, "input.pdf")
            compressed_pdf_path = os.path.join(temp_dir, "compressed.pdf")
            
            with open(input_pdf_path, "wb") as f:
                f.write(file_content.read())
            
            original_size, compressed_size = compress_pdf(input_pdf_path, compressed_pdf_path)
            compression_ratio = (1 - compressed_size / original_size) * 100 if original_size > 0 else 0
            
            await message.answer_document(
                FSInputFile(compressed_pdf_path, filename=f"compressed_{message.document.file_name}")
            )
            
            await delete_previous_messages(message)
            await processing_msg.delete()
            
            await message.answer(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç.\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∂–∞—Ç–∏—è:\n"
                f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {format_size(original_size)}\n"
                f"‚Ä¢ –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {format_size(compressed_size)}\n"
                f"‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–∏–µ: {compression_ratio:.1f}%",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                .as_markup()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ PDF: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ PDF: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            .as_markup()
        )
    
    await state.clear()


def compress_pdf(input_path, output_path):
    """–°–∂–∏–º–∞–µ—Ç PDF-—Ñ–∞–π–ª."""
    original_size = os.path.getsize(input_path)
    
    pdf = fitz.open(input_path)
    pdf.save(
        output_path,
        garbage=4,
        deflate=True,
        clean=True,
        linear=True
    )
    pdf.close()
    
    compressed_size = os.path.getsize(output_path)
    return original_size, compressed_size


def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    if size_bytes < 1024:
        return f"{size_bytes} –ë"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} –ö–ë"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} –ú–ë"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} –ì–ë"