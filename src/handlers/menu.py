from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.utils import delete_previous_messages

router = Router()

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üé≠ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞", callback_data="menu:background")
    builder.button(text="üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí PDF", callback_data="menu:images_to_pdf")
    builder.button(text="üìë –û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF", callback_data="menu:merge_pdf")
    builder.button(text="üóú –°–∂–∞—Ç—å PDF", callback_data="menu:compress_pdf")
    builder.button(text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç (OCR)", callback_data="menu:ocr")
    builder.adjust(1)
    return builder.as_markup()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DocHelperBot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF\n"
        "‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –°–∂–∞—Ç–∏–µ PDF-—Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö (OCR)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard()
    )


@router.callback_query(F.data.startswith("menu:"))
async def process_menu_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é."""
    await callback.answer()
    
    action = callback.data.split(":")[1]
    
    await delete_previous_messages(callback.message)
    
    if action == "background":
        await callback.message.answer(
            "üé≠ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω.",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"
            ).as_markup()
        )
    
    elif action == "images_to_pdf":
        await callback.message.answer(
            "üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí PDF</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ PDF.\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å PDF¬ª.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üìÑ –°–æ–∑–¥–∞—Ç—å PDF", callback_data="create_pdf")
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .adjust(1)
            .as_markup()
        )
    
    elif action == "merge_pdf":
        await callback.message.answer(
            "üìë <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ PDF-—Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å.\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF¬ª.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üìë –û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF", callback_data="merge_pdf_files")
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .adjust(1)
            .as_markup()
        )
    
    elif action == "compress_pdf":
        await callback.message.answer(
            "üóú <b>–°–∂–∞—Ç–∏–µ PDF</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )
    
    elif action == "ocr":
        await callback.message.answer(
            "üîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            .as_markup()
        )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.answer()
    
    await delete_previous_messages(callback.message)
    
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )