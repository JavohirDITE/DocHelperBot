import os
import tempfile
import logging
import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import pytesseract
from PIL import Image

from handlers.utils import delete_previous_messages

router = Router()
logger = logging.getLogger(__name__)

class OCRStates(StatesGroup):
    waiting_for_image = State()


@router.callback_query(F.data == "menu:ocr")
async def start_ocr(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
    await callback.answer()
    await state.set_state(OCRStates.waiting_for_image)


@router.message(F.photo & OCRStates.waiting_for_image)
@router.message(F.document & F.document.mime_type.startswith("image/") & OCRStates.waiting_for_image)
async def process_image_for_ocr(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
    processing_msg = await message.answer("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...")
    
    try:
        if message.photo:
            file_id = message.photo[-1].file_id
        else:
            file_id = message.document.file_id
        
        file = await message.bot.get_file(file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        with tempfile.TemporaryDirectory() as temp_dir:
            image_path = os.path.join(temp_dir, "image.png")
            
            with open(image_path, "wb") as f:
                f.write(file_content.read())
            
            text = await asyncio.to_thread(recognize_text, image_path)
            
            await delete_previous_messages(message)
            await processing_msg.delete()
            
            if text.strip():
                await message.answer(
                    "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:\n\n"
                    f"<pre>{text}</pre>",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    .as_markup()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    .as_markup()
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await processing_msg.delete()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            .as_markup()
        )
    
    await state.clear()


def recognize_text(image_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    img = Image.open(image_path)
    text = pytesseract.image_to_string(img, lang='rus+eng')
    return text