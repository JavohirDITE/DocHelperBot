#!/usr/bin/env python
import asyncio
import logging
import os
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command, Text

from config import Config
from vk_client import VKClient
from shazam_client import ShazamClient
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_album_name = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
vk_client = None
shazam_client = None

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name
    
    welcome_text = f"""
üéµ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
üîç –ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—Ç—å –º—É–∑—ã–∫—É –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º—É–∑—ã–∫–æ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é

–ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏! üé∂
    """
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/search - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üéµ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

<b>üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚Ä¢ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Shazam
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
    """
    
    await message.answer(help_text)

async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await BotStates.waiting_for_search.set()

async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"),
            types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
        )
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=keyboard)
        return
    
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    await handle_search(message, query)
    await state.finish()

async def handle_search(message: types.Message, query: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    search_msg = await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É...")
    
    try:
        global vk_client
        if not vk_client:
            await search_msg.edit_text("‚ùå VK –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        results = await vk_client.search_audio(query, page=0)
        
        if not results:
            await search_msg.edit_text(
                "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        for i, track in enumerate(results[:6]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            track_text = f"üéµ {track['artist']} - {track['title']}"
            if len(track_text) > 60:
                track_text = track_text[:57] + "..."
            
            keyboard.add(
                types.InlineKeyboardButton(
                    track_text,
                    callback_data=f"download:{track['id']}"
                )
            )
        
        await search_msg.edit_text(
            f"üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {query}\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç—Ä–µ–∫–æ–≤"
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await search_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_text_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if message.text.startswith('/') or message.text in ["üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return
    
    query = message.text.strip()
    await handle_search(message, query)

async def handle_voice_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏"""
    processing_msg = await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –º—É–∑—ã–∫—É...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await message.bot.get_file(message.voice.file_id)
        file_data = await message.bot.download_file(file_info.file_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ Shazam
        await processing_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ...")
        
        global shazam_client
        if not shazam_client:
            await processing_msg.edit_text("‚ùå Shazam –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        recognition_result = await shazam_client.recognize(file_data.read())
        
        if not recognition_result or not recognition_result.get('matches'):
            await processing_msg.edit_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = recognition_result.get('track', {})
        title = track_info.get('title', '')
        artist = track_info.get('subtitle', '')
        
        if not title or not artist:
            await processing_msg.edit_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = f"{artist} - {title}"
        
        await processing_msg.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
            "üîç –ò—â—É –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ..."
        )
        
        # –ò—â–µ–º –≤ VK
        global vk_client
        results = await vk_client.search_audio(query, page=0)
        
        if not results:
            await processing_msg.edit_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        for track in results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            track_text = f"üéµ {track['artist']} - {track['title']}"
            if len(track_text) > 60:
                track_text = track_text[:57] + "..."
            
            keyboard.add(
                types.InlineKeyboardButton(
                    track_text,
                    callback_data=f"download:{track['id']}"
                )
            )
        
        await processing_msg.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
            f"üéµ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç—Ä–µ–∫–æ–≤"
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫:",
            reply_markup=keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {query}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_download_track(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–∫–∞ –∏–∑ callback_data
    track_id = callback_query.data.split(':')[1]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback_query.message.answer("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
    
    try:
        global vk_client
        track_info = await vk_client.get_track_by_id(track_id)
        
        if not track_info:
            await loading_msg.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        await loading_msg.edit_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...")
        audio_data = await vk_client.download_audio(track_info['url'])
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        thumb_data = None
        if track_info.get('thumb_url'):
            try:
                thumb_data = await vk_client.download_cover(track_info['thumb_url'])
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await loading_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        
        await callback_query.message.answer_audio(
            audio_data,
            duration=track_info.get('duration', 0),
            performer=track_info['artist'],
            title=track_info['title'],
            thumb=thumb_data.getvalue() if thumb_data else None
        )
        
        await loading_msg.delete()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Å–∫–∞—á–∞–ª —Ç—Ä–µ–∫ {track_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_button_press(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    if message.text == "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏":
        await cmd_search(message)
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        await cmd_help(message)

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="üéµ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="search", description="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def on_startup(dp: Dispatcher):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await set_bot_commands(dp.bot)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VK –∫–ª–∏–µ–Ω—Ç
    global vk_client, shazam_client
    try:
        vk_client = VKClient()
        await vk_client.init()
        logger.info("VK –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Shazam –∫–ª–∏–µ–Ω—Ç
    try:
        shazam_client = ShazamClient()
        logger.info("Shazam –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Shazam –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(dp: Dispatcher):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    global vk_client
    if vk_client:
        await vk_client.close()
    
    await dp.storage.close()
    await dp.storage.wait_closed()
    
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_start, Command("start"))
    dp.register_message_handler(cmd_help, Command("help"))
    dp.register_message_handler(cmd_search, Command("search"))
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è
    dp.register_message_handler(
        process_search_query, 
        state=BotStates.waiting_for_search
    )
    
    # Callback –∑–∞–ø—Ä–æ—Å—ã
    dp.register_callback_query_handler(
        handle_download_track,
        Text(startswith="download:")
    )
    
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.register_message_handler(
        handle_voice_message,
        content_types=types.ContentType.VOICE
    )
    
    # –ö–Ω–æ–ø–∫–∏
    dp.register_message_handler(
        handle_button_press,
        Text(equals=["üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])
    )
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫)
    dp.register_message_handler(
        handle_text_search,
        content_types=types.ContentType.TEXT
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
        storage = MemoryStorage()
        dp = Dispatcher(bot, storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
