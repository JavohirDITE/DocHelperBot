from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text

from vk_client import VKClient
from database import Database
from utils.keyboards import (
    get_track_actions_keyboard, 
    get_albums_selection_keyboard,
    get_search_results_keyboard
)
from utils.logger import setup_logger

logger = setup_logger(__name__)

async def handle_download_track(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–∫–∞ –∏–∑ callback_data
    track_id = callback_query.data.split(':')[1]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback_query.message.answer("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
    
    try:
        vk_client = VKClient()
        track_info = await vk_client.get_track_by_id(track_id)
        
        if not track_info:
            await loading_msg.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        await loading_msg.edit_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...")
        audio_data = await vk_client.download_audio(track_info['url'])
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        thumb_data = None
        if track_info.get('thumb_url'):
            try:
                thumb_data = await vk_client.download_cover(track_info['thumb_url'])
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await loading_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        
        audio_file = types.InputFile(
            audio_data,
            filename=f"{track_info['artist']} - {track_info['title']}.mp3"
        )
        
        await callback_query.message.answer_audio(
            audio_file,
            duration=track_info.get('duration', 0),
            performer=track_info['artist'],
            title=track_info['title'],
            thumb=thumb_data,
            reply_markup=get_track_actions_keyboard(track_id)
        )
        
        await loading_msg.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        await db.save_downloaded_track(
            callback_query.from_user.id,
            track_id,
            track_info
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Å–∫–∞—á–∞–ª —Ç—Ä–µ–∫ {track_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_add_to_album(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –∞–ª—å–±–æ–º"""
    await callback_query.answer()
    
    track_id = callback_query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = Database()
    albums = await db.get_user_albums(callback_query.from_user.id)
    
    if not albums:
        await callback_query.message.answer(
            "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∞–ª—å–±–æ–º –∫–æ–º–∞–Ω–¥–æ–π /albums"
        )
        return
    
    keyboard = get_albums_selection_keyboard(albums, track_id)
    
    await callback_query.message.answer(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:",
        reply_markup=keyboard
    )

async def handle_album_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    await callback_query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: album_add:album_id:track_id
    parts = callback_query.data.split(':')
    album_id = int(parts[1])
    track_id = parts[2]
    
    try:
        db = Database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –∞–ª—å–±–æ–º–µ
        exists = await db.track_exists_in_album(album_id, track_id)
        if exists:
            await callback_query.message.edit_text(
                "‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–ª—å–±–æ–º–µ"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –∞–ª—å–±–æ–º
        await db.add_track_to_album(album_id, track_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞
        album = await db.get_album_by_id(album_id)
        
        await callback_query.message.edit_text(
            f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–ª—å–±–æ–º '<b>{album['name']}</b>'"
        )
        
        logger.info(f"–¢—Ä–µ–∫ {track_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–ª—å–±–æ–º {album_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–ª—å–±–æ–º: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–ª—å–±–æ–º"
        )

async def handle_search_pagination(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    await callback_query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: search_page:query:page
    parts = callback_query.data.split(':')
    query = parts[1]
    page = int(parts[2])
    
    try:
        vk_client = VKClient()
        results = await vk_client.search_audio(query, page=page)
        
        if not results:
            await callback_query.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç", show_alert=True)
            return
        
        keyboard = get_search_results_keyboard(results, query, page)
        
        await callback_query.message.edit_text(
            f"üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {query}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    dp.register_callback_query_handler(
        handle_download_track,
        Text(startswith="download:")
    )
    dp.register_callback_query_handler(
        handle_add_to_album,
        Text(startswith="add_album:")
    )
    dp.register_callback_query_handler(
        handle_album_selection,
        Text(startswith="album_add:")
    )
    dp.register_callback_query_handler(
        handle_search_pagination,
        Text(startswith="search_page:")
    )
