import io
from aiogram import Dispatcher, types

from shazam_client import ShazamClient
from vk_client import VKClient
from utils.keyboards import get_search_results_keyboard
from utils.logger import setup_logger

logger = setup_logger(__name__)

async def handle_voice_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –º—É–∑—ã–∫—É...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await message.bot.get_file(message.voice.file_id)
        file_data = await message.bot.download_file(file_info.file_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ Shazam
        await processing_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ...")
        
        shazam_client = ShazamClient()
        recognition_result = await shazam_client.recognize(file_data.read())
        
        if not recognition_result or not recognition_result.get('matches'):
            await processing_msg.edit_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = recognition_result.get('track', {})
        title = track_info.get('title', '')
        artist = track_info.get('subtitle', '')
        
        if not title or not artist:
            await processing_msg.edit_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = f"{artist} - {title}"
        
        await processing_msg.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
            "üîç –ò—â—É –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ..."
        )
        
        # –ò—â–µ–º –≤ VK
        vk_client = VKClient()
        results = await vk_client.search_audio(query, page=0)
        
        if not results:
            await processing_msg.edit_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        keyboard = get_search_results_keyboard(results, query, 0)
        
        await processing_msg.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <b>{query}</b>\n"
            f"üéµ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç—Ä–µ–∫–æ–≤"
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫:",
            reply_markup=keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {query}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_audio_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await handle_voice_message(message)

def register_audio_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ"""
    dp.register_message_handler(
        handle_voice_message,
        content_types=types.ContentType.VOICE
    )
    dp.register_message_handler(
        handle_audio_message,
        content_types=types.ContentType.AUDIO
    )
