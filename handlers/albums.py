from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from database import Database
from utils.keyboards import get_albums_keyboard, get_album_keyboard, get_main_keyboard
from utils.states import BotStates
from utils.logger import setup_logger

logger = setup_logger(__name__)

async def cmd_albums(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /albums"""
    db = Database()
    albums = await db.get_user_albums(message.from_user.id)
    
    if not albums:
        await message.answer(
            "üìÅ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–ª—å–±–æ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É!",
            reply_markup=get_albums_keyboard(albums, can_create=True)
        )
    else:
        albums_text = "üìÅ <b>–í–∞—à–∏ –∞–ª—å–±–æ–º—ã:</b>\n\n"
        for album in albums:
            track_count = await db.get_album_track_count(album['id'])
            albums_text += f"‚Ä¢ {album['name']} ({track_count} —Ç—Ä–µ–∫–æ–≤)\n"
        
        await message.answer(
            albums_text,
            reply_markup=get_albums_keyboard(albums, can_create=True)
        )

async def create_album_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞"""
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await BotStates.waiting_for_album_name.set()

async def create_album_finish(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
        return
    
    album_name = message.text.strip()
    if not album_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    if len(album_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    try:
        db = Database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∞–ª—å–±–æ–º–∞
        existing = await db.get_album_by_name(message.from_user.id, album_name)
        if existing:
            await message.answer(
                f"‚ùå –ê–ª—å–±–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{album_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º
        album_id = await db.create_album(message.from_user.id, album_name)
        
        await message.answer(
            f"‚úÖ –ê–ª—å–±–æ–º '<b>{album_name}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_main_keyboard()
        )
        
        await state.finish()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª –∞–ª—å–±–æ–º '{album_name}'")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.finish()

def register_album_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–ª—å–±–æ–º–æ–≤"""
    dp.register_message_handler(cmd_albums, Command("albums"))
    dp.register_message_handler(
        create_album_finish,
        state=BotStates.waiting_for_album_name
    )
