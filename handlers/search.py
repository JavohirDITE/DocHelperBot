from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text

from vk_client import VKClient
from utils.keyboards import get_search_results_keyboard, get_main_keyboard
from utils.states import BotStates
from utils.logger import setup_logger

logger = setup_logger(__name__)

async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await BotStates.waiting_for_search.set()

async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_main_keyboard()
        )
        return
    
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É...")
    
    try:
        vk_client = VKClient()
        results = await vk_client.search_audio(query, page=0)
        
        if not results:
            await message.answer(
                "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            query=query,
            results=results,
            page=0
        )
        
        keyboard = get_search_results_keyboard(results, query, 0)
        
        await message.answer(
            f"üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {query}\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç—Ä–µ–∫–æ–≤",
            reply_markup=keyboard
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=get_main_keyboard()
        )
        
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )
        await state.finish()

async def handle_text_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        return
    
    query = message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    search_msg = await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É...")
    
    try:
        vk_client = VKClient()
        results = await vk_client.search_audio(query, page=0)
        
        if not results:
            await search_msg.edit_text(
                "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return
        
        keyboard = get_search_results_keyboard(results, query, 0)
        
        await search_msg.edit_text(
            f"üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {query}\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç—Ä–µ–∫–æ–≤"
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await search_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_search_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
    dp.register_message_handler(cmd_search, Command("search"))
    dp.register_message_handler(
        process_search_query, 
        state=BotStates.waiting_for_search
    )
    dp.register_message_handler(
        handle_text_search,
        content_types=types.ContentType.TEXT
    )
